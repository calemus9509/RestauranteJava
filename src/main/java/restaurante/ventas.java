/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package restaurante;

import carrito.Carro;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jugo.Jugo;
import platoPrincipal.PlatoPrincipal;
import postre.Postre;
import sopa.Sopa;
import entorno.Conectar;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

/**
 *
 * @author CAMILO
 */
public class ventas extends javax.swing.JFrame {

    static List<PlatoPrincipal> platosPrincipales = FrmPlatosPrincipales.getPlatosPrincipales();
    static List<Sopa> sopa = FrmSopa.getSopa();
    static List<Jugo> jugo = FrmJugo.getJugo();
    static List<Postre> Postres = FrmPostre.getPostres();
    static List<PlatoPrincipal> listMod = new ArrayList<>();
    static List<Sopa> listMods = new ArrayList<>();
    static List<Jugo> listModj = new ArrayList<>();
    static List<Postre> listModp = new ArrayList<>();
    static List<Carro> carrito = new ArrayList<>();
    static List<Carro> carritoss = new ArrayList<>();
    static List<Carro> carritoj = new ArrayList<>();
    static List<Carro> carritop = new ArrayList<>();

    private int registroModificar;
    int registroPlato;
    int registroSopa;
    int registroJugo;
    int registroPostre;
    int opcion=0;

    Conectar con = new Conectar();
    Connection cn = con.conexion();

    /**
     * Creates new form menu
     */
    public ventas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTable = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePlatoPrincipal = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableSopa = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableJugo = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablePostre = new javax.swing.JTable();
        titulo = new javax.swing.JLabel();
        btnVerMenu = new javax.swing.JButton();
        jComboBoxIdioma = new javax.swing.JComboBox<>();
        btnCarrito = new javax.swing.JButton();
        Bcarrito = new javax.swing.JButton();
        fondo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemPlatos = new javax.swing.JMenuItem();
        jMenuItemSopas = new javax.swing.JMenuItem();
        jMenuItemJugos = new javax.swing.JMenuItem();
        jMenuItemPostres = new javax.swing.JMenuItem();
        jMenuOpciones = new javax.swing.JMenu();
        jMenuItemSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablePlatoPrincipal.setBackground(new java.awt.Color(153, 153, 153));
        tablePlatoPrincipal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePlatoPrincipal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePlatoPrincipalMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablePlatoPrincipal);
        if (tablePlatoPrincipal.getColumnModel().getColumnCount() > 0) {
            tablePlatoPrincipal.getColumnModel().getColumn(0).setResizable(false);
            tablePlatoPrincipal.getColumnModel().getColumn(1).setResizable(false);
            tablePlatoPrincipal.getColumnModel().getColumn(2).setResizable(false);
        }

        jTable.addTab("plato principal", jScrollPane2);

        tableSopa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableSopa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSopaMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableSopa);

        jTable.addTab("Sopas", jScrollPane3);

        tableJugo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableJugo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableJugoMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tableJugo);
        if (tableJugo.getColumnModel().getColumnCount() > 0) {
            tableJugo.getColumnModel().getColumn(0).setResizable(false);
            tableJugo.getColumnModel().getColumn(1).setResizable(false);
            tableJugo.getColumnModel().getColumn(2).setResizable(false);
        }

        jTable.addTab("Jugos", jScrollPane5);

        tablePostre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePostre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePostreMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tablePostre);
        if (tablePostre.getColumnModel().getColumnCount() > 0) {
            tablePostre.getColumnModel().getColumn(0).setResizable(false);
            tablePostre.getColumnModel().getColumn(2).setResizable(false);
        }

        jTable.addTab("Postre", jScrollPane4);

        jPanel1.add(jTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 310, 500, 160));

        titulo.setFont(new java.awt.Font("Bookman Old Style", 1, 48)); // NOI18N
        titulo.setForeground(new java.awt.Color(51, 51, 51));
        titulo.setText("Menu");
        jPanel1.add(titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 0, -1, -1));

        btnVerMenu.setBackground(new java.awt.Color(255, 204, 204));
        btnVerMenu.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnVerMenu.setForeground(new java.awt.Color(51, 0, 0));
        btnVerMenu.setIcon(new javax.swing.ImageIcon("C:\\Users\\CAMILO\\Downloads\\menuicon.png")); // NOI18N
        btnVerMenu.setText("Ver Menu");
        btnVerMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerMenuActionPerformed(evt);
            }
        });
        jPanel1.add(btnVerMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 530, 210, 60));

        jComboBoxIdioma.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Espa√±ol", "Ingles" }));
        jComboBoxIdioma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxIdiomaActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxIdioma, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        btnCarrito.setBackground(new java.awt.Color(255, 204, 204));
        btnCarrito.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnCarrito.setForeground(new java.awt.Color(102, 0, 0));
        btnCarrito.setIcon(new javax.swing.ImageIcon("C:\\Users\\CAMILO\\Downloads\\carrito-de-supermercado.png")); // NOI18N
        btnCarrito.setText("Agregar");
        btnCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarritoActionPerformed(evt);
            }
        });
        jPanel1.add(btnCarrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 530, 200, 60));

        Bcarrito.setBackground(new java.awt.Color(255, 255, 204));
        Bcarrito.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Bcarrito.setIcon(new javax.swing.ImageIcon("C:\\Users\\CAMILO\\Downloads\\carrito-de-supermercado.png")); // NOI18N
        Bcarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BcarritoActionPerformed(evt);
            }
        });
        jPanel1.add(Bcarrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 140, 60));

        fondo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        fondo.setIcon(new javax.swing.ImageIcon("C:\\Users\\CAMILO\\Downloads\\menu (1) (1).jpg")); // NOI18N
        jPanel1.add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jMenu1.setText("Menu");

        jMenuItemPlatos.setText("Platos Principales");
        jMenuItemPlatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPlatosActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPlatos);

        jMenuItemSopas.setText("Sopas");
        jMenuItemSopas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSopasActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSopas);

        jMenuItemJugos.setText("Jugos");
        jMenuItemJugos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemJugosActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemJugos);

        jMenuItemPostres.setText("Postres");
        jMenuItemPostres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPostresActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPostres);

        jMenuOpciones.setText("Opciones");

        jMenuItemSalir.setText("Salir");
        jMenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalirActionPerformed(evt);
            }
        });
        jMenuOpciones.add(jMenuItemSalir);

        jMenu1.add(jMenuOpciones);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerMenuActionPerformed
        // TODO add your handling code here:
        // System.out.println(this.jTable.getSelectedIndex());
        DefaultTableModel modeloPlato = new DefaultTableModel();
        modeloPlato.addColumn("Nombre");
        modeloPlato.addColumn("Precio");
        modeloPlato.addColumn("Cantidad");
        tablePlatoPrincipal.setModel(modeloPlato);
        Object O[] = null;
        String sql = "SELECT * FROM platoprincipal WHERE estado='A'";
        String datos[] = new String[3];
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                datos[0] = rs.getString("nombre");
                datos[1] = rs.getString("precio");
                datos[2] = rs.getString("cantidad");
                modeloPlato.addRow(datos);
                PlatoPrincipal platoMod = new PlatoPrincipal(rs.getInt("id"), rs.getString("nombre"), rs.getInt("precio"), rs.getInt("cantidad"));
                listMod.add(platoMod);
            }
            listMod.forEach(listMod -> {
                System.out.println(listMod.id + "\t" + listMod.nombrePlato + "\t" + listMod.precio + "\t" + listMod.cantidad);
            });
            st.close();
            tablePlatoPrincipal.setModel(modeloPlato);

        } catch (Exception e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(null, "Error al cargar la tabla ");
        }

//        for (int i = 0; i < platosPrincipales.size(); i++) {
//            modeloPlato.addRow(O);
//            modeloPlato.setValueAt(platosPrincipales.get(i).nombrePlato, i, 0);
//            modeloPlato.setValueAt(platosPrincipales.get(i).precio, i, 1);
//            modeloPlato.setValueAt(platosPrincipales.get(i).cantidad, i, 2);
//
//        }
        DefaultTableModel modelosopas = new DefaultTableModel();
        modelosopas.addColumn("Nombre");
        modelosopas.addColumn("Precio");
        modelosopas.addColumn("Cantidad");
        tableSopa.setModel(modelosopas);
        String sqls = "SELECT*FROM sopa WHERE estado='A'";
        String datoss[] = new String[3];
        Statement sts;
        try {
            sts = cn.createStatement();
            ResultSet rss = sts.executeQuery(sqls);
            while (rss.next()) {
                datoss[0] = rss.getString("nombre");
                datoss[1] = rss.getString("precio");
                datoss[2] = rss.getString("cantidad");
                modelosopas.addRow(datoss);
                Sopa sopaMod = new Sopa(rss.getInt("id"), rss.getString("nombre"), rss.getInt("precio"), rss.getInt("cantidad"));
                listMods.add(sopaMod);
            }
            listMods.forEach(listMods -> {
                System.out.println(listMods.id + "\t" + listMods.nombreSopa + "\t" + listMods.precioSopa + "\t" + listMods.cantidadSopa);
            });
            sts.close();
            tableSopa.setModel(modelosopas);

        } catch (Exception e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(null, "Error al cargar la tabla ");
        }

//        for (int i = 0; i < sopa.size(); i++) {
//            modelosopas.addRow(O);
//            modelosopas.setValueAt(sopa.get(i).nombreSopa, i, 0);
//            modelosopas.setValueAt(sopa.get(i).precioSopa, i, 1);
//            modelosopas.setValueAt(sopa.get(i).cantidadSopa, i, 2);
//
//        }
        DefaultTableModel modelojugos = new DefaultTableModel();
        modelojugos.addColumn("Nombre");
        modelojugos.addColumn("Precio");
        modelojugos.addColumn("Cantidad");
        tableJugo.setModel(modelojugos);
        String sqlj = "SELECT * FROM jugo WHERE estado='A'";
        String datosj[] = new String[3];
        Statement stj;
        try {
            stj = cn.createStatement();
            ResultSet rsj = stj.executeQuery(sqlj);
            while (rsj.next()) {
                datosj[0] = rsj.getString("nombre");
                datosj[1] = rsj.getString("precio");
                datosj[2] = rsj.getString("cantidad");
                modelojugos.addRow(datosj);
                Jugo jugoMod = new Jugo(rsj.getInt("id"), rsj.getString("nombre"), rsj.getInt("precio"), rsj.getInt("cantidad"));
                listModj.add(jugoMod);
            }
            listModj.forEach(listModj -> {
                System.out.println(listModj.id + "\t" + listModj.nombreJugo + "\t" + listModj.precioJugo + "\t" + listModj.cantidadJugo);
            });
            //stj.close();
            tableJugo.setModel(modelojugos);

        } catch (Exception e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(null, "Error al cargar la tabla ");
        }

//        for (int i = 0; i < jugo.size(); i++) {
//            modelojugos.addRow(O);
//            modelojugos.setValueAt(jugo.get(i).nombreJugo, i, 0);
//            modelojugos.setValueAt(jugo.get(i).precioJugo, i, 1);
//            modelojugos.setValueAt(jugo.get(i).cantidadJugo, i, 2);
//
//        }
        DefaultTableModel modelopostres = new DefaultTableModel();
        modelopostres.addColumn("Nombre");
        modelopostres.addColumn("Precio");
        modelopostres.addColumn("Cantidad");
        tablePostre.setModel(modelopostres);
        String sqlp = "SELECT*FROM postre WHERE estado='A'";
        String datosp[] = new String[3];
        Statement stp;
        try {
            stp = cn.createStatement();
            ResultSet rsp = stp.executeQuery(sqlp);
            while (rsp.next()) {
                datosp[0] = rsp.getString("nombre");
                datosp[1] = rsp.getString("precio");
                datosp[2] = rsp.getString("cantidad");
                modelopostres.addRow(datosp);
                Postre postreMod = new Postre(rsp.getInt("id"), rsp.getString("nombre"), rsp.getInt("precio"), rsp.getInt("cantidad"));
                listModp.add(postreMod);
            }
            listModp.forEach(listModp -> {
                System.out.println(listModp.id + "\t" + listModp.nombrePostre + "\t" + listModp.precioPostre + "\t" + listModp.cantidadPostre);
            });
            stp.close();
            tablePostre.setModel(modelopostres);

        } catch (Exception e) {
            System.err.println(e);
            JOptionPane.showMessageDialog(null, "Error al cargar la tabla ");
        }

//        for (int i = 0; i < Postres.size(); i++) {
//            modelopostres.addRow(O);
//            modelopostres.setValueAt(Postres.get(i).nombrePostre, i, 0);
//            modelopostres.setValueAt(Postres.get(i).precioPostre, i, 1);
//            modelopostres.setValueAt(Postres.get(i).cantidadPostre, i, 2);
//
//        }

    }//GEN-LAST:event_btnVerMenuActionPerformed

    private void tablePlatoPrincipalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePlatoPrincipalMouseClicked
        // TODO add your handling code here:

        //System.out.println(tablePlatoPrincipal.rowAtPoint(evt.getPoint()));
        this.registroPlato = tablePlatoPrincipal.rowAtPoint(evt.getPoint());
        opcion = 1;
       


    }//GEN-LAST:event_tablePlatoPrincipalMouseClicked

    private void jMenuItemPlatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPlatosActionPerformed
        // TODO add your handling code here:
        FrmPlatosPrincipales platoPrincipal = new FrmPlatosPrincipales();
        platoPrincipal.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_jMenuItemPlatosActionPerformed

    private void jMenuItemPostresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPostresActionPerformed
        // TODO add your handling code here:
        FrmPostre postre = new FrmPostre();
        postre.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItemPostresActionPerformed

    private void jMenuItemSopasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSopasActionPerformed
        // TODO add your handling code here:
        FrmSopa sopa = new FrmSopa();
        sopa.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItemSopasActionPerformed

    private void jMenuItemJugosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemJugosActionPerformed
        // TODO add your handling code here:
        FrmJugo jugo = new FrmJugo();
        jugo.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItemJugosActionPerformed

    private void jMenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemSalirActionPerformed

    private void jComboBoxIdiomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxIdiomaActionPerformed
        // TODO add your handling code here:
        String seleccion = (String) jComboBoxIdioma.getSelectedItem();
        if (seleccion == "Ingles") {

            this.titulo.setText("Menu");

            this.btnVerMenu.setText("view menu");

        } else if (seleccion == "Espa√±ol") {
            ;
            this.btnVerMenu.setText("Ver Menu");

        }
    }//GEN-LAST:event_jComboBoxIdiomaActionPerformed

    private void btnCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarritoActionPerformed
        // TODO add your handling code here:
        if (opcion ==0){
         JOptionPane.showMessageDialog(rootPane, "Eliga una opcion");
        }else{
        
        String cantRequerida = JOptionPane.showInputDialog("ingrese cantidad");

        if (cantRequerida.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "por favor ingrese una cantidad");

        } else {
            int cant = Integer.parseInt(cantRequerida);
            switch (opcion) {
                case 1:
                    if (cant <= listMod.get(registroPlato).cantidad) {
                        String producto = listMod.get(registroPlato).nombrePlato;
                        int cantidad = cant;
                        int precio = cant * listMod.get(registroPlato).precio;
                        int id = listMod.get(registroPlato).id;
                        Carro carritos = new Carro(id, producto, cantidad, precio, opcion);
                        carrito.add(carritos);
                        this.Bcarrito.setText(Integer.toString(carrito.size()));
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "cantidad excede inventario");
                    }
                    break;

                case 2:
                    if (cant <= listMods.get(registroSopa).cantidadSopa) {
                        String producto = listMods.get(registroPlato).nombreSopa;
                        int cantidad = cant;
                        int precio = cant * listMods.get(registroSopa).precioSopa;
                        int id = listMods.get(registroSopa).id;
                        Carro carritoS = new Carro(id, producto, cantidad, precio, opcion);
                        carritoss.add(carritoS);
                        this.Bcarrito.setText(Integer.toString(carritoss.size()));
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "cantidad excede inventario");
                    }
                    break;

                case 3:
                    if (cant <= listModj.get(registroJugo).cantidadJugo) {
                        String producto = listModj.get(registroJugo).nombreJugo;
                        int cantidad = cant;
                        int precio = cant * listModj.get(registroJugo).precioJugo;
                        int id = listModj.get(registroJugo).id;
                        Carro carritojj = new Carro(id, producto, cantidad, precio, opcion);
                        carritoj.add(carritojj);
                        this.Bcarrito.setText(Integer.toString(carritoj.size()));
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "cantidad excede inventario");
                    }
                    break;

                case 4:
                    if (cant <= listModp.get(registroPostre).cantidadPostre) {
                        String producto = listModp.get(registroPostre).nombrePostre;
                        int cantidad = cant;
                        int precio = cant * listModp.get(registroPostre).precioPostre;
                        int id = listModp.get(registroPostre).id;
                        Carro carritopp = new Carro(id, producto, cantidad, precio, opcion);
                        carritop.add(carritopp);
                        this.Bcarrito.setText(Integer.toString(carritop.size()));
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "cantidad excede inventario");
                    }
                    break;
                default:
                                      
                    break;

            }
            opcion = 0;
        }

        }
    }//GEN-LAST:event_btnCarritoActionPerformed

    private void tableSopaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSopaMouseClicked
        // TODO add your handling code here:
        this.registroSopa = tableSopa.rowAtPoint(evt.getPoint());
        opcion = 2;
        
    }//GEN-LAST:event_tableSopaMouseClicked

    private void tableJugoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableJugoMouseClicked
        // TODO add your handling code here:
        this.registroJugo = tableJugo.rowAtPoint(evt.getPoint());
        opcion = 3;
    }//GEN-LAST:event_tableJugoMouseClicked

    private void tablePostreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePostreMouseClicked
        // TODO add your handling code here:
        this.registroPostre = tablePostre.rowAtPoint(evt.getPoint());
        opcion = 4;
    }//GEN-LAST:event_tablePostreMouseClicked

    private void BcarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BcarritoActionPerformed
        // TODO add your handling code here:
        Compras compra = new Compras();
              
      
       
        compra.setVisible(true);
        
      
       
            
        
    }//GEN-LAST:event_BcarritoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bcarrito;
    private javax.swing.JButton btnCarrito;
    private javax.swing.JButton btnVerMenu;
    private javax.swing.JLabel fondo;
    private javax.swing.JComboBox<String> jComboBoxIdioma;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemJugos;
    private javax.swing.JMenuItem jMenuItemPlatos;
    private javax.swing.JMenuItem jMenuItemPostres;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JMenuItem jMenuItemSopas;
    private javax.swing.JMenu jMenuOpciones;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTable;
    private javax.swing.JTable tableJugo;
    private javax.swing.JTable tablePlatoPrincipal;
    private javax.swing.JTable tablePostre;
    private javax.swing.JTable tableSopa;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables

    private void ActualizarCampos() {
        DefaultTableModel modeloPlato = new DefaultTableModel();
        modeloPlato.addColumn("Nombre");
        modeloPlato.addColumn("Precio");
        modeloPlato.addColumn("Cantidad");
        tablePlatoPrincipal.setModel(modeloPlato);
        Object O[] = null;

        for (int i = 0; i < platosPrincipales.size(); i++) {
            modeloPlato.addRow(O);
            modeloPlato.setValueAt(platosPrincipales.get(i).nombrePlato, i, 0);
            modeloPlato.setValueAt(platosPrincipales.get(i).precio, i, 1);
            modeloPlato.setValueAt(platosPrincipales.get(i).cantidad, i, 2);

        }
    }
}
